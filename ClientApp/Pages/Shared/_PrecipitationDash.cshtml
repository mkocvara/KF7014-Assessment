@using ClientApp.Data;
@using EasyNetQ;
@inject IReadOnlyRepository<PrecipitationMeasurement> PrecipitationRepository
@inject IBus EventBus
@model int // id of newest measurement with severe risk (0 if none)
@{
    IEnumerable<PrecipitationMeasurement> Measurements;
    Measurements = await PrecipitationRepository.GetLatestInEveryLocation();

    PrecipitationMeasurement? SevereMeasurement = null;
    if (Model > 0)
    {
        SevereMeasurement = Measurements.FirstOrDefault(m => m.Id == Model);
    }
}

@if (Measurements.Any())
{ 
    if (SevereMeasurement is not null)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Severe Weather Alert!</h4>
            <p>Severe precipitation has been detected in <b>@SevereMeasurement.Location.</b></p>
        </div>
    }

    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th scope="col">Location</th>
                <th scope="col">Last Measured</th>
                <th scope="col">Precipitation (mm)</th>
                <th scope="col">Coverage (%)</th>
                <th scope="col">Snowfall</th>
                <th scope="col">Snow Depth</th>
            </tr>
        </thead>
        <tbody> 
            @foreach (PrecipitationMeasurement Measurement in Measurements.OrderBy(m => m.Location))
            {
                <tr class="@(Measurement.SevereRisk ? "text-danger fw-bold" : "")">
                    <td>@Measurement.Location</td>
                    <td>@Measurement.DateTime</td>
                    <td>@Measurement.PrecipitationMm</td>
                    <td>@Measurement.Coverage</td>
                    <td>@Measurement.Snowfall</td>
                    <td>@Measurement.SnowDepth</td>
                </tr>
            }
            </tbody>
    </table>
}
else
{
    <p><i>No measurements found.</i></p>
}